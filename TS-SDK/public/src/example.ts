// Run me using ts-node example.py

import { bs58 } from "@project-serum/anchor/dist/cjs/utils/bytes"
import { Connection, Keypair, ConfirmOptions, PublicKey } from "@solana/web3.js"
import axios from "axios"
import { AverClient } from "./aver-client"
import { AVER_PROGRAM_ID, getAverApiEndpoint, getSolanaEndpoint } from "./ids"
import { SolanaNetwork } from "./types"

// ----------------------------------------------------
//    DEVNET AVER INTERACTION EXAMPLE
// ----------------------------------------------------
// This example is intended to demonstrate an end-to-end interaction where
// - A wallet is created or reloaded from a secret key
// - The wallet is funded with SOL and Tokens
// - A request is made to the Aver API to obtain a list of markets
// - A market is loaded using the market's identifying public key

async function main() {
  // ----------------------------------------------------
  //    GENERATE OR LOAD A WALLET
  // ----------------------------------------------------
  // Generate or reload an existing keypair ('wallet') - for example from storage in your system or environment files.
  // - New keypairs can be generated by calling Kaypair()

  const secretKey = bs58.decode(
    "zSaKmpRbsJQQjmMRQsADRQ1vss8P2SQLbxGiiL8LFf9rJ8bFT8S1jAqj8Fkwg9hyq6vb97rR8EDkyu5EFD2tFbj"
  )
  const ownerKeypair = Keypair.fromSecretKey(secretKey)
  console.log(`Keypair loaded with public key ${ownerKeypair.publicKey}`)

  // ----------------------------------------------------
  //    GENERATE AN AVERCLIENT INSTANCE TO INTERACT
  // ----------------------------------------------------
  // Here we us default transaction options
  // - You can learn more about these configuration points in the Solana documentation
  // - Generally, it relates to the trade-off of speed vs certainty in confirmation by the network

  const opts = { preflightCommitment: "confirmed" } as ConfirmOptions

  const connection = new Connection(
    getSolanaEndpoint(SolanaNetwork.Devnet),
    "confirmed"
  )
  const client = await AverClient.loadAverClient(
    connection,
    SolanaNetwork.Devnet,
    ownerKeypair,
    opts,
    AVER_PROGRAM_ID
  )

  // ----------------------------------------------------
  //   FUND THE WALLET WITH SOL AND TOKENS, IF NECESSARY
  // ----------------------------------------------------
  // Fund the wallet with Lamports/SOL if required
  // - On mainnet, this would require a purchase/transfer of Lamports/SOL from another wallet or an exchange
  // - On devnet, you can simulate this using an 'airdrop'

  // Gets Solana Airdrop
  console.log("-".repeat(10))
  console.log("Topping up SOL/Lamports...")
  console.log(
    `- Old SOL/Lamports balance: ${await client?.requestLamportBalance(
      ownerKeypair.publicKey
    )}`
  )
  await client?.requestLamportAirdrop(1_000_000, ownerKeypair.publicKey)
  console.log(
    `- New SOL/Lamports balance: ${await client?.requestLamportBalance(
      ownerKeypair.publicKey
    )}`
  )

  console.log("-".repeat(10))
  console.log("Topping up USDC Tokens...")
  // Creates (or loads if one already exists) an Associated Token Account - where tokens will be stored for this wallet
  const ata = await client?.getOrCreateTokenAta(ownerKeypair)
  let tokenBalance = await client?.requestTokenBalance(
    client.quoteTokenMint,
    ownerKeypair.publicKey
  )
  console.log(` - Old token balance: ${tokenBalance?.uiAmount}`)
  const txnSignature = (
    await client?.requestTokenAirdrop(
      1_000_000_000,
      client.quoteTokenMint,
      ownerKeypair.publicKey
    )
  )?.data.signature
  // Wait to ensure transaction has been confirmed before moving on
  await client?.connection.confirmTransaction(txnSignature, "confirmed")
  tokenBalance = await await client?.requestTokenBalance(
    client.quoteTokenMint,
    ownerKeypair.publicKey
  )
  console.log(` - New token balance: ${tokenBalance?.uiAmount}`)

  // ----------------------------------------------------
  //    GET A LIST OF MARKETS AVAILABLE TO TRADE
  // ----------------------------------------------------
  // We can query the Aver API to provide a list of markets
  // Filters can be applied to load specific categories, status, etc
  // Here we simply load all markets and will select the first one in the section below
  // To find out more, query https://dev.api.aver.exchange/v2/markets/ in your browser

  const allMarkets = await axios.get(
    getAverApiEndpoint(SolanaNetwork.Devnet) + "/v2/markets"
  )

  //Load all active markets from endpoint
  const marketPubkeys = allMarkets.data
    .filter((d) => d.internal_status === "active")
    .map((d) => new PublicKey(d.pubkey))
}

main()
